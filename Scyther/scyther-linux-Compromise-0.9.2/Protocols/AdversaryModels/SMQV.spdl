/* 
 * SMQV two pass version
 *
 */

macro a = sk(I);
macro A = exp(g1(a));
macro b = sk(R);
macro B = exp(g1(b));

macro dA = H(g1(x),Y,I,R);
macro eA = H(Y,g1(x),I,R);
macro dB = H(X,g1(y),I,R);
macro eB = H(g1(y),X,I,R);

macro sA = add(a,mult(dA,x));
macro baseA = mult(B,exp(Y,eA));
macro sigmaA = exp(baseA,sA);
macro keyA = KDF(sigmaA,I,R,g1(x),Y);

macro sB = add(b,mult(eB,y));
macro baseB = mult(A,exp(X,dB));
macro sigmaB = exp(baseB,sB);
macro keyB = KDF(sigmaB,I,R,X,g1(y));


// Hash functions
hashfunction h1,h2,g1,g2,KDF,LSB,H;

// Addition, multiplication
// For now, simply hashes
hashfunction mult,add,exp;

/*
 * Hack to simulate public knowledge of public keys.
 */
protocol @publickeys(PK)
{
	role PK
	{
		send_!1(PK,PK, g1(sk(PK)));
	}
}
		
/*
 * Hack to simulate g^ab = g^ba inside terms.
 * '@' prefix of protocol name denotes helper protocol, which is used by
 * Scyther for displaying, and such protocols are ignored in
 * auto-generation of protocol modifiers.
 */
protocol @exponentiation(RA,RB,RC)
{
	role RA
	{
		var X,Y, T1,T2: Ticket;

		recv_!1(RA,RA, h2(
		  g2(g1(X),Y),
		  T1, T2, RA,RB
		  ));
		send_!2(RA,RA, h2(
		  g2(g1(Y),X),
		  T1, T2, RA,RB
		  ));
	}
	role RB
	{
		var X,Y, T1,T2: Ticket;

		recv_!3(RB,RB, h2(
		  T1,
		  g2(g1(X),Y),
		  T2, RA,RB
		  ));
		send_!4(RB,RB, h2(
		  T1,
		  g2(g1(Y),X),
		  T2, RA,RB
		  ));
	}
	role RC
	{
		var X,Y, T1,T2: Ticket;

		recv_!5(RC,RC, h2(
		  T1, T2,
		  g2(g1(X),Y),
		  RA,RB
		  ));
		send_!6(RC,RC, h2(
		  T1, T2,
		  g2(g1(Y),X),
		  RA,RB
		  ));
	}
}

protocol @addmult(I,R)
{
	role I
	{
		var X,Y: Ticket;

		recv_!1(I,I, add(X,Y) );
		send_!2(I,I, add(Y,X) );
	}
	role R
	{
		var X,Y: Ticket;

		recv_!3(R,R, mult(X,Y) );
		send_!4(R,R, mult(Y,X) );
	}
}

//protocol @keyswap(I,R)
//{
//	role I
//	{
//		var x,y: Nonce;
//		recv_!1(I,I,
//		KDF(exp(mult(g1(y),exp(g1(sk(R)),LSB(g1(y),I))),add(x,mult(LSB(g1(x),R),sk(I)))),I,R,g1(x),g1(y)) );
//		send_!2(I,I,
//		KDF(exp(mult(g1(x),exp(g1(sk(I)),LSB(g1(x),R))),add(y,mult(LSB(g1(y),I),sk(R)))),I,R,g1(x),g1(y)) );
//	}
//}

// The protocol description

protocol SMQV(I,R)
{
	role I
	{
		fresh x: Nonce;
		var Y: Ticket;

		send_1(I,R, g1(x) );

		send_Compromise(I,I, x ) ;

		recv_2(R,I, Y );

		//send_Compromise(I,I, LSB(g1(x),R) ) ;
		//send_Compromise(I,I, mult(LSB(g1(x),R),sk(I)) ) ;
		//send_Compromise(I,I, add(x,mult(LSB(g1(x),R),sk(I))) ) ;
		//send_Compromise(I,I, LSB(Y,I) ) ;
		//send_Compromise(I,I, exp(g1(sk(R)),LSB(Y,I)) ) ;
		//send_Compromise(I,I, mult(Y,exp(g1(sk(R)),LSB(Y,I))) ) ;
		//send_Compromise(I,I, exp(mult(Y,exp(g1(sk(R)),LSB(Y,I))),add(x,mult(LSB(g1(x),R),sk(I)))) ) ;

		claim(I,SKR, keyA);
	}	
	
	role R
	{
		fresh y: Nonce;
		var X: Ticket;

		recv_1(I,R, X );

		send_Compromise(R,R, y );

		send_2(R,I, g1(y) );

		//send_Compromise(R,R, LSB(g1(y),I) );
		//send_Compromise(R,R, mult(LSB(g1(y),I),sk(R)) );
		//send_Compromise(R,R, add(y,mult(LSB(g1(y),I),sk(R))) );
		//send_Compromise(R,R, LSB(X,R) );
		//send_Compromise(R,R, exp(g1(sk(I)),LSB(X,R)) );
		//send_Compromise(R,R, mult(X,exp(g1(sk(I)),LSB(X,R))) );
		//send_Compromise(R,R, exp(mult(X,exp(g1(sk(I)),LSB(X,R))),add(y,mult(LSB(g1(y),I),sk(R)))) );

		claim(R,SKR, keyB);
	}
}

