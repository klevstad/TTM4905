/* 
 * Protocol 1: Delayed Data Deletion
 * Uses symmetric data encryption
 */

hashfunction g1,g2,hash;					// Hash functions
usertype Tag;
const l1,l2,l3,l4a,l4b,l5,l6a,l6b,l7,l8a,l8b: Tag;

/*
 * Helper function to simulate g^ab = g^ba.
 * '@' prefix of protocol name denotes helper protocol, which is used by 
 * Scyther for displaying
 */
protocol @exponentiation(RA,RB) {
	role RA {
		var x,y: Nonce;

		recv_!1(RA,RA, g2(g1(x),y) );
		send_!2(RA,RA, g2(g1(y),x) );
	}
	role RB {
		var m: Ticket;
		var x,y: Nonce;
		recv_!3(RB,RB, { m }g2(g1(x),y) );
		send_!4(RB,RB, { m }g2(g1(y),x) );
	}
}

// The protocol description
protocol protocol0(S,R,P)
{
	role S
	{
		fresh rS: Nonce;	// own DH key contribution
		fresh te: Nonce;	// expiration time
		fresh M: Nonce;	// time-limited data
		var beta: Nonce;	// R's DH key contribution (encapsulated in g1; S does not really learn it)

		// mark T_e as session identifier
		claim_sidS(S, SID, te);

		// phase 1
		send_1( S,R, {l1, g1(rS),te}sk(S)       );
		recv_5( R,S, {l5, g1(rS),g1(beta),te }sk(R)  );

		// phase 2
		send_!6( S,R, {l6b,{l6a,M}g2(g1(beta),rS)}sk(S) );

		// Reveal internal state - M and rS have been deleted,
		// so, nothing (new) left...
		//send_9( S,S, te,g1(beta));

		claim_s(S,Secret,M);
		//claim_s(S,SKR,g2(g1(beta),rS));
	}

	role R
	{
		fresh rR: Nonce;	// own DH key contribution with S
		fresh rR2: Nonce;	// own DH key contribution with P
		fresh rR3: Nonce;	// 2. own DH key contribution with P
		var te: Nonce;		// expiration time
		var M: Nonce;		// time-limited data
		var alpha: Nonce;	// S's DH key contribution
		var teta1: Nonce;	// P's DH key contribution
		var teta2: Nonce;	// P's second DH key contribution
		var k1,k2: Nonce;	// The key K

		// phase 1
		recv_1( S,R, {l1,g1(alpha),te}sk(S) );

		// mark T_e as session identifier
		claim_sidR(R, SID, te);

		send_2( R,P, {l2,g1(rR2)}sk(R)  );
		recv_3( P,R, {l3,g1(teta1)}sk(P)        );
		send_4( R,P, {l4b, S,te, {l4a,g2(g1(alpha),rR)}g2(g1(teta1),rR2)}sk(R)  );
		
		send_5( R,S, {l5,g1(alpha),g1(rR),te}sk(R) );

		// phase 2
		recv_!6( S,R, {l6b,{l6a,M}g2(g1(alpha),rR)}sk(S) );

		// phase 3
		send_7( R,P, {l7,g1(rR3),S,te}sk(R) );
		recv_!8(  P,R, {l8b, g1(rR3), g1(teta2), {l8a,g2(g1(k1),k2)}g2(g1(teta2),rR3)}sk(P));
		// decryption and use of M internally without messages

		// Reveal internal state - M, g2(g1(k1),k2), rR, rR2 and rR3 have been deleted
		// So, it is empty (all been sent plain)
		//send_10( R,R, );

		claim_r(R,Secret,M);
		//claim_r(R,SKR,g2(g1(alpha),rR));
		//claim_r(R,Secret,g2(g1(k1),k2));	
}
	
	role P
	{
		var te: Nonce;  	// expiration time
		fresh rP: Nonce;	// own DH key contribution
		fresh rP2: Nonce;	// own DH key contribution
		var gamma1: Nonce;	// R's 1. DH key contribution
		var gamma2: Nonce;	// R's 2. DH key contribution
		var k1,k2: Nonce;	// The key K

		// phase 1
		recv_2( R,P, {l2,g1(gamma1)}sk(R) );
		send_3( P,R, {l3,g1(rP)}sk(P) );
		recv_!4( R,P,{l4b,S,te, {l4a,g2(g1(k1),k2)}g2(g1(gamma1),rP)}sk(R));

		// mark T_e as session identifier
		claim_sidP(P, SID, te);

		// phase 3
		recv_7( R,P, {l7,g1(gamma2),S,te}sk(R) );
		send_8( P,R, {l8b,g1(gamma2),g1(rP2),{l8a,g2(g1(k1),k2)}g2(g1(gamma2),rP2)}sk(P));

		// Reveal internal state - g2(g1(k1),k2), rP and rP2 have been deleted
		// So only public information left
		//send_11( P,P, te,g1(gamma1),g1(gamma2));

		claim_p(P,Secret,g2(g1(k1),k2));
	}

}
