/*
	Adaptive Pairwise Key Establishment Scheme (APKES)
*/

usertype Index; # User defined type Index
hashfunction MIC; # Message Integrity Code

macro PairwiseKey = {Na, Nb}k(A, B);

macro Message1 = (Na, AddressA);
macro Message2 = (Na, Nb, Iab, AddressB);
macro Message2-MIC = MIC(Message2,  k(A,B));
macro Message3 = (Msg, Iba);
macro Message3-MIC = MIC(Message3, PairwiseKey);

const Msg; # ACK-message.
const AddressA; # A's Short Address
const AddressB; # B's Short Address
const Iab: Index; # A's index in B's list of neighbours
const Iba: Index; # B's index in A's list of neighbours

protocol APKES(A, B)
{
	role A
	{
		fresh Na: Nonce;
		var Nb: Nonce;

		# HELLO
		send_1(A, B, Message1);

		# HELLOACK
		recv_2(B, A, Message2, Message2-MIC);
		claim(A, Running, B, PairwiseKey); # Agree upon the value of Na

		#ACK
		send_3(A, B, (Message3, Message3-MIC));

		claim(A, Alive); # Entity authentication
		claim(A, Weakagree); # Weak agreement, A and B believe they are communicating with each other
		claim(A, Niagree); # Non-injective agreement
		claim(A, Nisynch); # Non-injective synchronization
		claim(A, Commit, B, Na); # Claim that the recv2 value of Na has not been changed from the send_1 value of Na
		claim(A, Secret, PairwiseKey); # Secrecy of key
		claim(A, Commit, B, PairwiseKey); # Explicit key authentication
	}

	role B
	{
		fresh Nb: Nonce;
		var Na: Nonce;

		# HELLO
		recv_1(A, B, Message1);
		claim(B, Running, A, Na); # Agree upon the value of Na

		# HELLOACK
		send_2(B, A, Message2, Message2-MIC);

		# ACK
		recv_3(A,B, Message3, Message3-MIC);
		claim(B, Running, A, PairwiseKey);

		claim(B, Alive);
		claim(B, Weakagree);
		claim(B, Niagree);
		claim(B, Nisynch);
		claim(B, Secret, PairwiseKey);
		claim(B, Commit, A, PairwiseKey);
	}
}
