/*
Secure Authentication and Key Establishment Scheme (SAKES)
*/

hashfunction HASH, MAC;
hashfunction g1, g2; # Hash functions to model Diffie-Hellman

const G; # Generator
const P; # Prime modulus

macro SessionKeyA = g2(g1(sk(D)), Sk);
macro SessionKeyD = g2(g1(Sk), sk(D));

protocol SAKES(A, B, C, D) {

	role A {
		# 6LoWPAN End Device

		fresh Na: Nonce;
		var Nb, Nc: Nonce;
		var Sk;

		send_1(A, B, Na);
		recv_2(B, A, Nb);
		send_3(A, B, A, Na, {A, B, D, Na}k(A, C), MAC({A, B, D, Na}k(A, C), A, Na, k(A, B)));
		recv_6(C, A, (B, Nc, MAC(B, Nc, k(A, C))));
		recv_9(B, A, {Nb, SessionKeyA}k(A, B));

		claim(A, Alive, B);
		claim(A, Alive, C);
		claim(A, Weakagree, B);
		claim(A, Weakagree, C);
		claim(A, Niagree);
		claim(A, Nisynch);
		claim(A, SKR, SessionKeyA);
	}

	role B {
		# 6LoWPAN Router

		fresh Nb: Nonce;
		var Na, Nc, Nd: Nonce;
		var Pk, Sk;

		recv_1(A, B, Na);
		send_2(B, A, Nb);
		recv_3(A, B, A, Na, {A, B, D, Na}k(A, C), MAC({A, B, D, Na}k(A, C), A, Na, k(A, B)));
		send_4(B, C, {A, B, D, Na}k(A, C), B, Nb, MAC({A, B, D, Na}k(A, C), B, Nb, k(B, C)));
		recv_5(C, B, {{A, B, D}sk(C), Pk, Sk, Nc}k(B, C));
		send_7(B, D, {A, B, D}sk(C), B, Nb, Pk, g1(Sk), HASH({A, B, D}sk(C), B, Nb, Pk, g1(Sk)), {{A, B, D}sk(C), B, Nb, Pk, g1(Sk), HASH({A, B, D}sk(C), B, Nb, Pk, g1(Sk))}Sk);
		recv_8(D, B, D, Nd, pk(D), g1(sk(D)), HASH(D, Nd, pk(D), g1(sk(D))), {D, Nd, pk(D), g1(sk(D)), HASH(D, Nd, pk(D), g1(sk(D)))}sk(D));
		send_9(B, A, {Nb, SessionKeyA}k(A,B));

		claim(B, Secret, Sk);
		claim(B, Alive, A);
		claim(B, Alive, C);
		claim(B, Alive, D);
		claim(B, Weakagree, A);
		claim(B, Weakagree, C);
		claim(B, Weakagree, D);
		claim(B, Niagree);
		claim(B, Nisynch);
	}

	role C {
		# 6LoWPAN Border Router

		fresh Nc: Nonce;
		var Na, Nb: Nonce;

		const Pk: Function;
		secret Sk: Function;
		inversekeys (Pk, Sk);

		recv_4(B, C, {A, B, D, Na}k(A, C), B, Nb, MAC({A, B, D, Na}k(A, C), B, Nb, k(B, C)));
		send_5(C, B, {{A, B, D}sk(C), Pk, Sk, Nc}k(B, C));
		send_6(C, A, (B, Nc, MAC(B, Nc, k(A, C))));

		claim(C, Alive, A);
		claim(C, Alive, B);
		claim(C, Weakagree, A);
		claim(C, Weakagree, B);
		claim(C, Niagree);
		claim(C, Nisynch);
	}

	role D {
		# Remote Server

		fresh Nd: Nonce;
		var Nb: Nonce;
		var Pk, Sk;

		recv_7(B, D, {A, B, D}sk(C), B, Nb, Pk, g1(Sk), HASH({A, B, D}sk(C), B, Nb, Pk, g1(Sk)), {{A, B, D}sk(C), B, Nb, Pk, g1(Sk), HASH({A, B, D}sk(C), B, Nb, Pk, g1(Sk))}Sk);
		send_8(D, B, D, Nd, pk(D), g1(sk(D)), HASH(D, Nd, pk(D), g1(sk(D))), {D, Nd, pk(D), g1(sk(D)), HASH(D, Nd, pk(D), g1(sk(D)))}sk(D));
    
		claim(D, Alive, B);
		claim(D, Weakagree, B);
		claim(D, Niagree);
		claim(D, Nisynch);
		claim(D, SKR, SessionKeyD);
	}
}

// Hack to model Diffie-Hellman where g^ab = g^ba

protocol @exponentiation(RA)
{
	role RA
	{
		var T1,T2: Ticket;

		recv_!1(RA,RA, g2(g1(T1),T2) );
		send_!2(RA,RA, g2(g1(T2),T1) );
	}
}
