/*
Secure Authentication and Key Establishment Scheme (SAKES)
*/

hashfunction HASH;
hashfunction MAC;

hashfunction g1, g2;

const P, G;

macro Message1 = Na;
macro Message2-MAC = MAC(Nb, k(A,B));
macro Message2 = (Nb, Message2-MAC);

macro Message3-Cipher = {A, B, D, Na}k(A, C);
macro Message3-MAC = MAC(Message3-Cipher, A, Na, Nb, k(A, B)); # Added Nb
macro Message3 = (Message3-Cipher, A, Na, Nb, Message3-MAC); # Added Nb

macro Message4-MAC = MAC(Message3-Cipher, k(B, C), B, Nb);
macro Message4 = (Message3-Cipher, Message4-MAC, B, Nb);

macro Message5-Signed = {A, B, D}sk(C);
macro Message5 = {Message5-Signed, Pk, Sk, Nb, Nc}k(B, C); # Added Nb

macro Message6-MAC = MAC(B, Na, Nb, Nc, k(A,B)); # Added Na
macro Message6 = (B, Na, Nb, Nc, Message6-MAC); # Added Na

macro Message7 = (Message5-Signed, B, Nb2, Pk, g1(Sk));
macro Message7-HASH = (Message7);
macro Message7-Signed = {Message7, Message7-HASH}Sk;

#macro Message7-HASH = HASH(Message5-Signed, B, Nb2, Pk); # Use fresh Nb2 instead of old Nb gives Weakagree for  D
#macro Message7 = {Message5-Signed, Message7-HASH, B, Nb2}Sk;

macro Message8 = (D, Nd, Nb2, pk(D), g1(sk(D)));
macro Message8-HASH = HASH(Message8);
macro Message8-Signed = {Message8, Message8-HASH}sk(D);

macro SessionKeyA = g2(g1(sk(D)), Sk);
macro SessionKeyD = g2(g1(Sk), sk(D));

#macro Message8-hash = hash(D, pk(D), P, G, Nd, Nb2);
#macro Message8 = {Message8-hash, D, P, G, Nd, Nb2}sk(D);

macro Message9 = {Na, Nb, SessionKeyA}k(A,B); # Include the Na nonce in the message.



protocol EIRIK(A, B, C, D) {

	role A {
		# 6LoWPAN End Device (A)

		fresh Na: Nonce;
		var Nb, Nc, Nb2, Nd: Nonce;
		var Pk, Sk;

		# HELLO
		send_1(A, B, Message1);
		recv_2(B, A, Message2);
		send_3(A, B, Message3, Message3-MAC);
		recv_6(C, A, Message6);
			
		claim(A, Niagree);
		claim(A, Nisynch);

		recv_9(B, A, Message9);

		claim_A1(A, Alive, B);
		claim_A2(A, Alive, C);
		claim_A3(A, Weakagree, B);
		claim_A4(A, Weakagree, C);
		claim_A5(A, Niagree);
		claim_A6(A, Nisynch);
		claim_A7(A, SKR, SessionKeyA);
	}

	role B {
		# 6LoWPAN Router (B)

		fresh Nb, Nb2: Nonce;
		var Na, Nc, Nd: Nonce;
		var Pk, Sk;

		# HELLO
		recv_1(A, B, Na);
		send_2(B, A, Message2);

		recv_3(A, B, Message3, Message3-MAC);
		send_4(B, C, Message4, Message4-MAC);
		recv_5(C, B, Message5);

		claim(B, Niagree);
		claim(B, Nisynch);

		send_7(B, D, Message7, Message7-HASH, Message7-Signed);
		recv_8(D, B, Message8, Message8-HASH, Message8-Signed);
		send_9(B, A, Message9);

		claim_B8(B, Secret, Sk);
		claim_B9(B, Alive, A);
		claim_B10(B, Alive, C);
		claim_B11(B, Alive, D);
		claim_B12(B, Weakagree, A);
		claim_B13(B, Weakagree, C);
		claim_B14(B, Weakagree, D);
		claim_B15(B, Niagree);
		claim_B16(B, Nisynch);
	}

	role C {
		# 6LoWPAN Border Router (C)

		fresh Nc: Nonce;
		var Nb: Nonce;
		var Na: Nonce;

		const Pk: Function;
		secret Sk: Function;
		inversekeys (Pk, Sk);

		recv_4(B, C, Message4, Message4-MAC);

		send_5(C, B, Message5);
		send_6(C, A, Message6);

		claim_C1(C, Alive, A);
		claim_C2(C, Alive, B);
		claim_C3(C, Weakagree, A);
		claim_C4(C, Weakagree, B);
		claim_C5(C, Niagree);
		claim_C6(C, Nisynch);
	}

	role D {
		fresh Nd: Nonce;
		var Nb2: Nonce;
		var Pk, Sk;

		recv_7(B, D, Message7, Message7-HASH, Message7-Signed);
		send_8(D, B, Message8, Message8-HASH, Message8-Signed);

		claim(D, Alive, B);
		claim(D, Weakagree, B);
		claim(D, Niagree);
		claim(D, Nisynch);
		claim(D, SKR, SessionKeyD);
	}


}

// Hack for Diffie Hellman where g^ab = g^ba

protocol @exponentiation(RA)
{
	role RA
	{
		var T1,T2: Ticket;

		recv_!1(RA,RA, g2(g1(T1),T2) );
		send_!2(RA,RA, g2(g1(T2),T1) );
	}
}
