/*
	Secure Authentication and Key Establishment (SAKES) - Session Key Establishment - Improved
*/
usertype key;
hashfunction HASH;
hashfunction g1, g2;
var A, B, C, D: Agent;

macro Proof = {A, B, D}sk(C); The identities of the end device, router and remote server are verified and signed by the authentication module in the border router C
macro Message1 = (Proof, B, Nb, g1(sk(B)));
macro Message1-HASH = HASH(Message1);
macro Message1-Signed = {Message1, Message1-HASH}sk(B);
macro Message2 = (Nd, Proof, Nb, g1(sk(D)));
macro Message2-HASH = HASH(Message2);
macro Message2-Signed = {Message2, Message2-HASH}sk(D);
macro SessionKeyD = g2(g1(sk(B)), sk(D));
macro Message3 = {Nb, SessionKeyA}k(A,B); # Should also return the Na value in a full-size model.

protocol SAKES-KEYS(A, B, C, D) {

	role A {
		# 6LoWPAN End Device (A)
    # Na should be linked from the authentication phase in a full-size model.
		var Nb: Nonce;
		var SessionKeyA: key;

		recv_3(B, A, Message3);

		claim(A, Niagree);
		claim(A, Nisynch);
		claim(A, SKR, SessionKeyA);
	}

	role B {
		# 6LoWPAN Router (B)
		fresh Nb: Nonce; # Nb should be linked from the authentication phase in a full-size model
		var Nd: Nonce;
		fresh SessionKeyA: key;

		send_1(B, D, Message1, Message1-HASH, Message1-Signed);
		recv_2(D, B, Message2, Message2-HASH, Message2-Signed);
		send_3(B, A, Message3);

		claim(B, Alive, D);
		claim(B, Alive, A);
		claim(B, Weakagree, D);
		claim(B, Weakagree, A);
		claim(B, Niagree);
		claim(B, Nisynch);
		claim(B, SKR, SessionKeyA);
		claim(B, SKR, SessionKeyD);
	}

	role C {
		# 6LoWPAN Border Router (C)
	}

	role D {
		# Remote Server (D)
		fresh Nd: Nonce;
		var Nb: Nonce;

		recv_1(B, D, Message1, Message1-HASH, Message1-Signed);
		send_2(D, B, Message2, Message2-HASH, Message2-Signed);

		claim(D, Alive, B);
		claim(D, Weakagree, B);
		claim(D, Niagree);
		claim(D, Nisynch);
		claim(D, SKR, SessionKeyD);
	}
}

//Computation from Message 2
protocol @exp(DH){
	role DH {
		var x,y: Agent;

			recv_!DH1(DH, DH, g2(g1(sk(x)),sk(y)));
			send_!DH2(DH, DH, g2(g1(sk(y)),sk(x)));
		}
}
