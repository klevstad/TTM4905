/*
	Fixing the stupid SAKES protocol.
*/
usertype G, P;
hashfunction MAC;


/*--------------------------------------------------------------------------------------
AUTHENTICATION
---------------------------------------------------------------------------------------*/
hashfunction MAC;

macro Message1 = Na;
macro Message2 = Nb;

macro Message3-Cipher = {A, B, D, Na}k(A, C);
macro Message3 = Message3-Cipher, A, Na;
macro Message3-MAC = MAC(Message3, k(A, B));

macro Message4 = Message3-Cipher, B, Nb;
macro Message4-MAC = MAC(Message4, k(B, C));

macro SignedProof = {A, B, D}sk(C);
macro Message5 = {SignedProof, Pk, Sk, Nc}k(B, C);

macro Message6 = B, Nc;
macro Message6-MAC = MAC(Message6, k(A,C));

/*--------------------------------------------------------------------------------------
SESSION KEY ESTABLISHMENT
---------------------------------------------------------------------------------------*/

hashfunction HASH;
hashfunction g1, g2;

#macro Proof = {A, B, D, Nc}sk(C);

macro Message-1 = (SignedProof, B, Nb, Pk, g1(Sk));
macro Message-1-HASH = HASH(Message-1);
macro Message-1-Signed = {Message-1, Message-1-HASH}Sk;

macro Message-2 = (D, Nd, pk(D), g1(sk(D)));
macro Message-2-HASH = HASH(Message-2);
macro Message-2-Signed = {Message-2, Message-2-HASH}sk(D);

macro SessionKeyA = g2(g1(sk(D)), Sk);
macro SessionKeyD = g2(g1(Sk), sk(D));

macro Message-3 = {Nb, SessionKeyA}k(A,B);


protocol Authentication(A, B, C, D) {

  role A {
    fresh Na: Nonce;
    var Nb, Nc: Nonce;
    var Sk: Ticket;

    send_1(A, B, Message1);
		recv_2(B, A, Message2);
		send_3(A, B, Message3, Message3-MAC);
		recv_6(C, A, Message6, Message6-MAC);
		claim(A, Running, B, Na, Nb);

    #claim(A, Alive, B);
    #claim(A, Alive, C);
    #claim(A, Weakagree, B);
    #claim(A, Weakagree, C);
    #claim(A, Niagree);
    #claim(A, Nisynch);
  }

  role B {
    fresh Nb: Nonce;
    var Na, Nc, Nd: Nonce;
    var Pk, Sk;

    recv_1(A, B, Message1);
    send_2(B,A,Message2);
    recv_3(A, B, Message3, Message3-MAC);
    send_4(B, C, Message4, Message4-MAC);
	recv_5(C, B, Message5);
	claim(B, Running, A, Na, Nb);

    #claim(B, Alive, A);
    #claim(B, Alive, C);
	#claim(B, Weakagree, A);
	#claim(B, Weakagree, C);
	#claim(B, Niagree);
	#claim(B, Nisynch);
    }


  role C {
    fresh Nc: Nonce;
    var Na, Nb: Nonce;

    # Generate keypair for B
    const Pk: Function;
    secret Sk: Function;
    inversekeys (Pk, Sk);

    recv_4(B, C, Message4, Message4-MAC);
    send_5(C, B, Message5);
    send_6(C, A, Message6, Message6-MAC);

    #claim(C, Alive, A);
    #claim(C, Alive, B);
    #claim(C, Weakagree, A);
    #claim(C, Weakagree, B);
    #claim(C, Niagree);
    #claim(C, Nisynch);
  }

  role D {

  }

}



protocol KeyEstablishment(A, B, C, D) {

	role A {
		# 6LoWPAN End Device (A)
		
		var Na, Nb: Nonce;
		#claim(A, Running, B, Na, Nb);
		
		var Sk;

		recv_3(B, A, Message-3);
		claim(A, Running, B, Nb);

		claim(A, Niagree);
		claim(A, Nisynch);
		claim(A, SKR, SessionKeyA);
		#claim(A, Commit, B, Na, Nb);
	}

	role B {
		# 6LoWPAN Router (B)
		
		#fresh Nb, Nc: Nonce;
		var Nb, Nc, Nd: Nonce;
		#claim(B, Running, D, Nb, Nc);

		const Pk: Function;
		secret Sk: Function;
		inversekeys (Pk, Sk);

		send_1(B, D, Message-1, Message-1-HASH, Message-1-Signed);
		recv_2(D, B, Message-2, Message-2-HASH, Message-2-Signed);
		#claim(B, Running, D, Nb, Nc);
		send_3(B, A, Message-3);

		#claim(B, Alive, A);
		claim(B, Alive, D);
		#claim(B, Weakagree, A);
		claim(B, Weakagree, D);
		claim(B, Niagree);
		claim(B, Nisynch);
		claim(B, SKR, SessionKeyA);
		#claim(B, Commit, C, Nb);
	}

	role C {
		# 6LoWPAN Border Router (C)
	}

	role D {
		# Remote Server (D)

		fresh Nd: Nonce;
		var Pk, Sk: Ticket;
		var Nb, Nc: Nonce;

		recv_1(B, D, Message-1, Message-1-HASH, Message-1-Signed);
		#claim(D, Running, B, Nb, Nc);
		send_2(D, B, Message-2, Message-2-HASH, Message-2-Signed);

		claim(D, Alive, B);
		claim(D, Weakagree, B);
		claim(D, Niagree);
		claim(D, Nisynch);
		claim(D, SKR, SessionKeyD);
		#claim(D, Commit, B, Nb, Nc);
	}
}

// Hack for Diffie Hellman where g^ab = g^ba

protocol @exponentiation(DH)
{
	role DH
	{
		var T1,T2: Ticket;

		recv_!1(DH,DH, g2(g1(T1),T2) );
		send_!2(DH,DH, g2(g1(T2),T1) );
	}
}