/*
	Secure Authentication and Key Establishment (SAKES) - Session Key Establishment
*/

hashfunction HASH;
hashfunction g1, g2;

macro Proof = {A, B, D}sk(C);

macro Message1 = (Proof, B, Nb, g1(sk(B)));
macro Message1-HASH = HASH(Message1);
macro Message1-Signed = {Message1, Message1-HASH}sk(B);

macro Message2 = (D, Nd, g1(sk(D)));
macro Message2-HASH = HASH(Message2);
macro Message2-Signed = {Message2, Message2-HASH}sk(D);

macro SessionKey = g2(g1(sk(D)), sk(B));

macro Message3 = {Nb, SessionKey}k(A,B);


protocol SAKES-KEYS(A, B, C, D) {

	role A {
		# 6LoWPAN End Device (A)
		var Nb: Nonce;
		var Sk;

		recv_3(B, A, Message3);

		claim(A, Niagree);
		claim(A, Nisynch);
		claim(A, SKR, SessionKey);
	}

	role B {
		# 6LoWPAN Router (B)
		fresh Nb: Nonce;
		var Nd: Nonce;

		send_1(B, D, Message1, Message1-HASH, Message1-Signed);
		claim(B, Running, D, g1(sk(B)));
		recv_2(D, B, Message2, Message2-HASH, Message2-Signed);
		send_3(B, A, Message3);

		claim(B, Alive, D);
		claim(B, Weakagree, D);
		claim(B, Niagree);
		claim(B, Nisynch);
		claim(B, SKR, SessionKey);
	}

	role C {
		# 6LoWPAN Border Router (C)
	}

	role D {
		# Remote Server (D)

		fresh Nd: Nonce;
		var Nb: Nonce;

		recv_1(B, D, Message1, Message1-HASH, Message1-Signed);
		claim(D, Running, B, g1(sk(B)));
		send_2(D, B, Message2, Message2-HASH, Message2-Signed);

		claim(D, Alive, B);
		claim(D, Weakagree, B);
		claim(D, Niagree);
		claim(D, Nisynch);
		claim(D, SKR, SessionKey);
	}

	role DH {
		var x, y: Nonce;
		recv_!DH1(DH, DH, g2(g1(x),y));
		send_!DH2(DH, DH, g2(g1(y),x));
	}
}
