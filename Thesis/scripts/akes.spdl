/*
	Adaptive Key Establishment Scheme (AKES)
*/

hashfunction MIC;

const Msg;

const PANa; # A's Personal Area Network (PAN) Id
const PANb; # B's Personal Area Network (PAN) Id

const IDa: Agent; # A's extended, short or simple address
const IDb: Agent; # B's extended, short or simple address

const Ca; # B's frame counter of the last accepted frame from A
const Cb; # A's frame counter of the last accepted frame from B

const Pa; # Flag indicating whether or not A is currently one of B's permanent neighbours

const AddressA; # A's Short Address
const AddressB; # B's Short Address

const Iab; # A's index in B's list of neighbours (EBEAP)
const Iba; # B's index in A's list of neighbours (EBEAP)



macro SessionKey = {Na, Nb}k(A,B); # Where k(A,B) is the key from the plugged-in scheme

macro Message1 = (Na, PANa, IDa, Ca);
macro Message2 = (Nb, PANa, IDa, PANb, IDb, Iab, Cb, Pa);
macro Message2-MIC = MIC(Message2, SessionKey);
macro Message3 = (Msg, PANb, IDb, PANa, IDa, Iba, Ca);
macro Message3-MIC = MIC(Message3, SessionKey);


protocol AKES(A, B)
{
	role A
	{
	fresh Na: Nonce;
	var Nb: Nonce;

	# HELLO
	send_1(A, B, Message1);

	# HELLOACK
	recv_2(B, A, Message2, Message2-MIC);
	claim(A, Running, B, SessionKey);

	# ACK
	send_3(A, B, Message3, Message3-MIC);

	claim(A, SKR, SessionKey);
	claim(A, Alive);
	claim(A, Weakagree);
	claim(A, Niagree);
	claim(A, Nisynch);
	claim(A, Commit, B, SessionKey);
	}

  role B
	{
	fresh Nb: Nonce;
	var Na: Nonce;




	# HELLO
	recv_1(A, B, Message1);
	claim(B, Running, A, SessionKey);

	# HELLOACK
	send_2(B, A, Message2, Message2-MIC);

	# ACK
	recv_3(A, B, Message3, Message3-MIC);
	claim(B, Running, A, SessionKey);


	claim(B, SKR, SessionKey);
	claim(B, Alive);
	claim(B, Weakagree);
	claim(B, Niagree);
	claim(B, Nisynch);
	claim(B, Commit, A, SessionKey);
	}
}
