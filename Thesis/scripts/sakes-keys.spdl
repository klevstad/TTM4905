/*
	Secure Authentication and Key Establishment (SAKES) - Session Key Establishment
*/
usertype key; # User defined type
hashfunction HASH; # Un-keyed hash function
hashfunction g1, g2; # Hash functions to model Diffie-Helmman
var A, B, C, D: Agent; # Identities of the different entities

macro Proof = {A, B, D}sk(C); The identities of the end device, router and remote server are verified and signed by the authentication module in the border router
macro Message1 = (Proof, B, Nb, g1(sk(B)));
macro Message1-HASH = HASH(Message1);
macro Message1-Signed = {Message1, Message1-HASH}sk(B);
macro Message2 = (Nd, g1(sk(D)));
macro Message2-HASH = HASH(Message2);
macro Message2-Signed = {Message2, Message2-HASH}sk(D);
macro SessionKeyD = g2(g1(sk(B)), sk(D));
macro Message3 = {Nb, SessionKeyA}k(A,B);

protocol SAKES-KEYS(A, B, C, D) {
	role A {
		# 6LoWPAN End Device (A)

		var Nb: Nonce;
		var SessionKeyA: key;

		recv_3(B, A, Message3);

		claim(A, Niagree);
		claim(A, Nisynch);
		claim(A, SKR, SessionKeyA);
	}

	role B {
		# 6LoWPAN Router (B)

		fresh Nb: Nonce;
		var Nd: Nonce;
		fresh SessionKeyA: key;

		send_1(B, D, Message1, Message1-HASH, Message1-Signed);
		recv_2(D, B, Message2, Message2-HASH, Message2-Signed);
		send_3(B, A, Message3);

		claim(B, Alive, D); # Entity authentication of D
		claim(B, Alive, A); # Entity authentication of A
		claim(B, Weakagree, D); # Weak agreement of D
		claim(B, Weakagree, A); # Weakagreement of A
		claim(B, Niagree); # Non-injective agreement
		claim(B, Nisynch); # Non-injective synchronization
		claim(B, SKR, SessionKeyA); # Session key reveal of the fresh key that is distributed from the router to the end device
		claim(B, SKR, SessionKeyD); # Session key reveal of the session key that is established between the router and the server
	}

	role C {
		# 6LoWPAN Border Router (C)
	}

	role D {
		# Remote Server (D)
		fresh Nd: Nonce;
		var Nb: Nonce;

		recv_1(B, D, Message1, Message1-HASH, Message1-Signed);
		send_2(D, B, Message2, Message2-HASH, Message2-Signed);

		claim(D, Alive, B);
		claim(D, Weakagree, B);
		claim(D, Niagree);
		claim(D, Nisynch);
		claim(D, SKR, SessionKeyD);
	}
}

# Helper protocol to model the Diffie-Hellman approximation
protocol @exp(DH){
	role DH {
		var x,y: Agent;

		recv_!DH1(DH, DH, g2(g1(sk(x)),sk(y)));
		send_!DH2(DH, DH, g2(g1(sk(y)),sk(x)));
	}
}
