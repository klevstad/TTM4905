/*
	Secure Authentication and Key Establishment (SAKES) - Session Key Establishment
*/

hashfunction HASH;
hashfunction g1, g2;

macro Proof = {A, B, D, Pk}sk(C);

macro Message1 = (Proof, B, Nb, g1(Sk));
macro Message1-HASH = HASH(Message1);
macro Message1-Signed = {Message1, Message1-HASH}Sk;

macro Message2 = (D, Nd, pk(D), g1(sk(D)));
macro Message2-HASH = HASH(Message2);
macro Message2-Signed = {Message2, Message2-HASH}sk(D);

macro SessionKeyA = g2(g1(sk(D)), Sk);
macro SessionKeyD = g2(g1(Sk), sk(D));

macro Message3 = {A, B, Nb, SessionKeyA}k(A,B);


protocol SAKES-KEYS(A, B, C, D) {

	role A {
		# 6LoWPAN End Device (A)
		var Nb: Nonce;
		var Sk;

		recv_3(B, A, Message3);

		claim(A, Niagree);
		claim(A, Nisynch);
		claim(A, SKR, SessionKeyA);
	}

	role B {
		# 6LoWPAN Router (B)

		fresh Nb, Nc: Nonce;
		var Nd: Nonce;

		const Pk: Function;
		secret Sk: Function;
		inversekeys (Pk, Sk);

		send_1(B, D, Message1, Message1-HASH, Message1-Signed);
		recv_2(D, B, Message2, Message2-HASH, Message2-Signed);
		send_3(B, A, Message3);

		claim(B, Alive, D);
		claim(B, Weakagree, D);
		claim(B, Niagree);
		claim(B, Nisynch);
		claim(B, SKR, SessionKeyA);
	}

	role C {
		# 6LoWPAN Border Router (C)
	}

	role D {
		# Remote Server (D)

		fresh Nd: Nonce;
		var Pk, Sk: Ticket;
		var Nb, Nc: Nonce;

		recv_1(B, D, Message1, Message1-HASH, Message1-Signed);
		send_2(D, B, Message2, Message2-HASH, Message2-Signed);

		claim(D, Alive, B);
		claim(D, Weakagree, B);
		claim(D, Niagree);
		claim(D, Nisynch);
		claim(D, SKR, SessionKeyD);
	}
}