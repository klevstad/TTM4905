/*
Secure Authentication and Key Establishment Scheme (SAKES)
*/

hashfunction HASH, MAC;
hashfunction g1, g2; # Hash functions to model Diffie-Hellman

const G; # Generator
const P; # Prime modulus

macro Message1 = Na;
macro Message2 = Nb;

macro Message3-Cipher = {A, B, D, Na}k(A, C);
macro Message3-MAC = MAC(Message3-Cipher, A, Na, k(A, B));
macro Message3 = (Message3-Cipher, A, Na, Message3-MAC);

macro Message4-MAC = MAC(Message3-Cipher, k(B, C), B, Nb);
macro Message4 = (Message3-Cipher, Message4-MAC, B, Nb);

macro Message5-Signed = {A, B, D}sk(C);
macro Message5 = {Message5-Signed, Pk, Sk, Nc}k(B, C);

macro Message6-MAC = MAC(B, Nc, k(A,B));
macro Message6 = (B, Nc, Message6-MAC);

#macro Message7-HASH = HASH(Message5-Signed, B, Nb, Pk);
#macro Message7 = {Message5-Signed, Message7-HASH, B, Nb, Pk}Sk;

macro Message7 = (Message5-Signed, B, Nb, Pk, g1(Sk));
macro Message7-HASH = HASH(Message7);
macro Message7-Signed = {Message7, Message7-HASH}Sk;

#macro Message8-HASH = HASH(D, pk(D), P, G, Nd);
#macro Message8 = {Message8-HASH, D, P, G, Nd}sk(D);

macro Message8 = (D, Nd, pk(D, g1(sk(D))));
macro Message8-HASH = HASH(Message8);
macro Message8-Signed = {Message8, Message8-HASH}sk(D);

macro SessionKeyA = g2(g1(sk(D)), Sk);
macro SessionKeyD = g2(g1(Sk), sk(D));

macro Message9 = {Nb, SessionKeyA}k(A,B);

protocol SAKES(A, B, C, D) {

	role A {
		# 6LoWPAN End Device

		fresh Na: Nonce;
		var Nb: Nonce;
		var Nc: Nonce;
		var Pk, Sk;

		send_1(A, B, Message1);
		recv_2(B, A, Message2);
		send_3(A, B, Message3, Message3-MAC);
		recv_6(C, A, Message6);
		recv_9(B, A, Message9);

		claim(A, Alive, B);
		claim(A, Alive, C);
		claim(A, Weakagree, B);
		claim(A, Weakagree, C);
		claim(A, Niagree);
		claim(A, Nisynch);
		claim(A, SKR, SessionKeyA);
	}

	role B {
		# 6LoWPAN Router

		fresh Nb: Nonce;
		var Na, Nc, Nd: Nonce;
		var Pk, Sk;

		recv_1(A, B, Na);
		send_2(B, A, Message2);
		recv_3(A, B, Message3, Message3-MAC);
		send_4(B, C, Message4, Message4-MAC);
		recv_5(C, B, Message5);
		#send_7(B, D, Message7);
		send_7(B, D, Message7, Message7-HASH, Message7-Signed);

		#recv_8(D, B, Message8);
		recv_8(D, B, Message8, Message8-HASH, Message8-Signed);
		send_9(B, A, Message9);

		claim(B, Secret, Sk);
		claim(B, Alive, A);
		claim(B, Alive, C);
		claim(B, Alive, D);
		claim(B, Weakagree, A);
		claim(B, Weakagree, C);
		claim(B, Weakagree, D);
		claim(B, Niagree);
		claim(B, Nisynch);
	}

	role C {
		# 6LoWPAN Border Router

		fresh Nc: Nonce;
		var Na, Nb: Nonce;

		const Pk: Function;
		secret Sk: Function;
		inversekeys (Pk, Sk);

		recv_4(B, C, Message4, Message4-MAC);
		send_5(C, B, Message5);
		send_6(C, A, Message6);

		claim(C, Alive, A);
		claim(C, Alive, B);
		claim(C, Weakagree, A);
		claim(C, Weakagree, B);
		claim(C, Niagree);
		claim(C, Nisynch);
	}

	role D {
		# Remote Server

		fresh Nd: Nonce;
		var Nb: Nonce;
		var Pk, Sk;

		#recv_7(B, D, Message7);
		recv_7(B, D, Message7, Message7-HASH, Message7-Signed);
		#send_8(D, B, Message8);
		send_8(D, B, Message8, Message8-HASH, Message8-Signed);
		claim(D, Alive, B);
		claim(D, Weakagree, B);
		claim(D, Niagree);
		claim(D, Nisynch);
		claim(D, SKR, SessionKeyD);
	}
}

// Hack to model Diffie-Hellman where g^ab = g^ba

protocol @exponentiation(RA)
{
	role RA
	{
		var T1,T2: Ticket;

		recv_!1(RA,RA, g2(g1(T1),T2) );
		send_!2(RA,RA, g2(g1(T2),T1) );
	}
}
